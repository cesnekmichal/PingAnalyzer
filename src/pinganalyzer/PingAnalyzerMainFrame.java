package pinganalyzer;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.UIManager;

/**
 *
 * @author Michal
 */
public class PingAnalyzerMainFrame extends javax.swing.JFrame {

    /**
     * Creates new form PingAnalyzerMainFrame
     */
    public PingAnalyzerMainFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Network PING Analyzer");
        loadNodes();
        printNodes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_FindNODES = new javax.swing.JButton();
        field_IPaddressOrHostName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        field_TextArea = new javax.swing.JTextArea();
        btn_StartStop = new javax.swing.JButton();
        field_PingTimeout = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_FindNODES.setText("Find NODES");
        btn_FindNODES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_FindNODESActionPerformed(evt);
            }
        });

        field_IPaddressOrHostName.setText("8.8.8.8");

        jLabel1.setText("IP address or hostname");

        field_TextArea.setEditable(false);
        field_TextArea.setColumns(20);
        field_TextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        field_TextArea.setRows(5);
        jScrollPane1.setViewportView(field_TextArea);

        btn_StartStop.setText("Start/Stop PING");
        btn_StartStop.setEnabled(false);
        btn_StartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_StartStopActionPerformed(evt);
            }
        });

        field_PingTimeout.setModel(new javax.swing.SpinnerNumberModel(5000, 0, 9999, 1));

        jLabel2.setText("PING timeout");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_FindNODES)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_StartStop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(field_IPaddressOrHostName)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(field_PingTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 299, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_FindNODES)
                    .addComponent(field_IPaddressOrHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_StartStop)
                    .addComponent(field_PingTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    HashMap<String,ArrayList<Tuple<String,String>>> nodeMap = new HashMap<>();
    
    private void btn_FindNODESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_FindNODESActionPerformed
        
        btn_FindNODES.setEnabled(false);
        //SwingUtil.loop(100);
        String IPaddressOrHostName = field_IPaddressOrHostName.getText();
        ArrayList<Tuple<String,String>> ipNODES = nodeMap.get(IPaddressOrHostName);
        if(ipNODES==null){
            ArrayList<String> tracertLines = PingAnalyzer.tracert(IPaddressOrHostName);
            ipNODES = PingAnalyzer.getIpNODES(tracertLines);
            nodeMap.put(IPaddressOrHostName, ipNODES);
        }
        nodes.clear();
        for (Tuple<String,String> ipNODE : ipNODES) {
            nodes.add(new NODE(ipNODE.first,ipNODE.second));
        }
        printNodes();
        storeNodes();
        btn_FindNODES.setEnabled(true);
        btn_StartStop.setEnabled(!nodes.isEmpty());
        
    }//GEN-LAST:event_btn_FindNODESActionPerformed

    enum State{
        Started,
        Stopping,
        Stopped;
    }
    
    State state = State.Stopped;
    private Thread getThread(){
        Thread t = new Thread(){
            @Override
            public void run() {
                state = PingAnalyzerMainFrame.State.Started;
                btn_FindNODES.setEnabled(false);
                try {
                    while (state==PingAnalyzerMainFrame.State.Started) {
                        long t1 = System.currentTimeMillis();
                        for (NODE node : nodes) {
                            ArrayList<String> lines = PingAnalyzer.ping(node.ip,(Integer)field_PingTimeout.getValue());
                            Integer latency = PingAnalyzer.getLatency(lines);
                            if (latency == null) {
                                latency = (Integer) field_PingTimeout.getValue();
                            }
                            node.add(latency);
                            printNodes();
                            if (state==PingAnalyzerMainFrame.State.Stopping) {
                                return;
                            }
                        }
                        long time = System.currentTimeMillis()-t1;
                        if(time<1000){
                            PingAnalyzer.sleep(1000-time);
                        }
                    }
                } finally {
                    state = PingAnalyzerMainFrame.State.Stopped;
                    btn_FindNODES.setEnabled(true);
                }
            }
        };
        return t;
    }
    
    private void btn_StartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_StartStopActionPerformed
        
        switch(state){
            case Stopped :
                getThread().start();
                break;
            case Started :
                state = State.Stopping;
                break;
        }
        
    }//GEN-LAST:event_btn_StartStopActionPerformed

    DecimalFormat formatter = new DecimalFormat("###ms ");
    public String format(int value){
        return String.format("%7s", formatter.format(value));
    }
    
    public void storeNodes(){
        byte[] bytes = PingAnalyzer.serializeObject(nodeMap);
        try(FileOutputStream fos = new FileOutputStream("nodes.dat")){
            fos.write(bytes);
        } catch (Exception ex) {
        }
    }
    
    private void loadNodes(){
        try(FileInputStream fis = new FileInputStream("nodes.dat")){
            Object obj = PingAnalyzer.deSerializeObject(fis);
            if(obj instanceof HashMap){
                this.nodeMap =  (HashMap<String, ArrayList<Tuple<String, String>>>) obj;
            }
        } catch (Exception ex) {
        }
    }
    
    private void printNodes(){
        String s = "   Min    Max    Avg  Latest - Address"+"\n";
        for (NODE node : nodes) {
            s += format(node.min);
            s += format(node.max);
            s += format(node.avg);
            s += format(node.latest);
            s += " - "+ node.hostName;
            s += "\n";
        }
        field_TextArea.setText(s);
    }
    
    public ArrayList<NODE> nodes = new ArrayList<>();
    
    public static class NODE implements Serializable{
        String ip;
        String hostName;
        public NODE(String ip, String hostName) {
            this.ip = ip;
            this.hostName = hostName;
        }
        int min = 0;
        int max = 0;
        int avg = 0;
        int count = 0;
        int sum = 0;
        int latest = 0;
        public void add(int value){
            this.min = min==0 ? value : Math.min(this.min, value);
            this.max = Math.max(this.max, value);
            this.sum   += value;
            this.count += 1;
            this.avg   = this.sum/this.count;
            this.latest = value;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PingAnalyzerMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PingAnalyzerMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PingAnalyzerMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PingAnalyzerMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PingAnalyzerMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_FindNODES;
    private javax.swing.JButton btn_StartStop;
    private javax.swing.JTextField field_IPaddressOrHostName;
    private javax.swing.JSpinner field_PingTimeout;
    private javax.swing.JTextArea field_TextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
